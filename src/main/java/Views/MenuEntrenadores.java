
package Views;

import Controladores.AtaquesController;
import Controladores.EntrenadorController;
import ControladoresExtras.JPanelimagen;
import Controladores.PokemonController;
import Entidades.Ataque;
import Entidades.Entrenador;
import Entidades.Habilidad;
import Entidades.Pokemon;
import Entidades.PokemonAtaque;
import Entidades.TiposPokemon;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author yoriel
 */
public class MenuEntrenadores extends javax.swing.JFrame {

    /**
     * Creates new form PantallaInicio
     */
    DefaultListModel<Entrenador> modeloEntrenadores = new DefaultListModel<>();
    private EntrenadorController entrenadorController = new EntrenadorController();
    private List<Entrenador> listaEntrenadores = new ArrayList<>();
    private Entrenador entrenadorActual;

    public MenuEntrenadores() {
        initComponents();
        setTitle("Selector de Entrenadores");
        ListaEntrenadores.setModel(modeloEntrenadores);
        ListaEntrenadores.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {  //Evita varios eventos con un solo clic
                int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
                if (indiceSeleccionado >= 0) {
                    entrenadorActual = modeloEntrenadores.getElementAt(indiceSeleccionado);  //Guardamos el entrenador activo
                }
            }
        });

        imagenFondoEntrenador();
        setLocationRelativeTo(null);
        this.setResizable(false);

        cargarEntrenadores();

        //Para que la lista sea transparente o bueno, tengo el color del fondo
        ListaEntrenadores.setBackground(new Color(13, 173, 239, 255)); // Fondo completamente transparente
        ListaEntrenadores.setBorder(BorderFactory.createLineBorder(Color.red));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MenuEntre = new javax.swing.JPanel();
        AñadirEntrenador = new javax.swing.JButton();
        BotonELiminar = new javax.swing.JButton();
        AccederPokedex = new javax.swing.JButton();
        BotonEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaEntrenadores = new javax.swing.JList();
        GuardarEntrenador = new javax.swing.JButton();
        CargarEntrenador = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AñadirEntrenador.setText("Añadir Entrenador");
        AñadirEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirEntrenadorActionPerformed(evt);
            }
        });

        BotonELiminar.setText("Eliminar Entrenador");
        BotonELiminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonELiminarActionPerformed(evt);
            }
        });

        AccederPokedex.setText("Acceder Pokedex");
        AccederPokedex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccederPokedexActionPerformed(evt);
            }
        });

        BotonEditar.setText("Editar Entrenador");
        BotonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarActionPerformed(evt);
            }
        });

        ListaEntrenadores.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListaEntrenadores.setToolTipText("");
        jScrollPane1.setViewportView(ListaEntrenadores);

        GuardarEntrenador.setText("Guardar Entrenador");
        GuardarEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarEntrenadorActionPerformed(evt);
            }
        });

        CargarEntrenador.setText("Cargar Entrenador");
        CargarEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarEntrenadorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuEntreLayout = new javax.swing.GroupLayout(MenuEntre);
        MenuEntre.setLayout(MenuEntreLayout);
        MenuEntreLayout.setHorizontalGroup(
            MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuEntreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonEditar)
                    .addComponent(AñadirEntrenador)
                    .addComponent(BotonELiminar)
                    .addComponent(AccederPokedex)
                    .addComponent(GuardarEntrenador)
                    .addComponent(CargarEntrenador))
                .addGap(56, 56, 56))
        );
        MenuEntreLayout.setVerticalGroup(
            MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuEntreLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(AñadirEntrenador)
                .addGap(18, 18, 18)
                .addComponent(BotonEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BotonELiminar)
                .addGap(18, 18, 18)
                .addComponent(GuardarEntrenador)
                .addGap(137, 137, 137)
                .addComponent(AccederPokedex)
                .addGap(35, 35, 35)
                .addComponent(CargarEntrenador)
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuEntreLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuEntre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuEntre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AñadirEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirEntrenadorActionPerformed
        //Obtener el entrenador seleccionado  
        //(----------------añadir entrenador)--------------)

        // Luego de cerrar el diálogo, recarga tus datos para actualizar la vista
        AñadirEntrenador dialog = new AñadirEntrenador(this, true); // 'this' es el JFrame padre
        dialog.setVisible(true);  // Aquí se abre el Jdialog de "AñadirEntrenador"
        cargarEntrenadores();   // Al cerrarse el diálogo, recarga la lista para actualizar
        //modeloEntrenadores = new DefaultListModel<>();
    }//GEN-LAST:event_AñadirEntrenadorActionPerformed

    private void BotonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarActionPerformed
        //(----------------------editar entrenador-------------)
// Obtener el entrenador seleccionado en la lista
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador para editar.");
            return;
        }
        Entrenador entrenadorSeleccionado = modeloEntrenadores.getElementAt(indiceSeleccionado);

        EditarEntrenador dialog = new EditarEntrenador(this, true, entrenadorSeleccionado);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        cargarEntrenadores();

    }//GEN-LAST:event_BotonEditarActionPerformed

    private void BotonELiminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonELiminarActionPerformed
        //---------------------(eliminar entrenador------------------)
        // Primero obtenemos el entrenador seleccionado en la lista
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador para eliminar.");
            return;
        }

        Entrenador entrenadorSeleccionado = modeloEntrenadores.getElementAt(indiceSeleccionado);

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Estás seguro que quieres eliminar al entrenador " + entrenadorSeleccionado.getNomEntrenador() + "?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                entrenadorController.eliminarEntrenador(entrenadorSeleccionado.getIdEntrenador());
                JOptionPane.showMessageDialog(this, "Entrenador eliminado correctamente.");
                cargarEntrenadores();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error al eliminar el entrenador: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_BotonELiminarActionPerformed

    private void AccederPokedexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccederPokedexActionPerformed
        //(-------------------boton de acceder a pokedex---------------------)
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador.");
            return;
        }
        Entrenador entrenadorSeleccionado = listaEntrenadores.get(indiceSeleccionado);
        if (entrenadorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un entrenador para acceder a la Pokedex.");
            return;
        }
        //Cerrar ventana entrenadores cuando se accede a la pokedex
        this.setVisible(false);

        // Crear la ventana de Pokedex, pasando el entrenador seleccionado
        Pokedex ventanaPokedex = new Pokedex(this, true, entrenadorSeleccionado.getNomEntrenador());
        ventanaPokedex.setLocationRelativeTo(this);
        ventanaPokedex.setVisible(true);


    }//GEN-LAST:event_AccederPokedexActionPerformed

    private void GuardarEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarEntrenadorActionPerformed
        {
            if (entrenadorActual == null) {
                JOptionPane.showMessageDialog(this, "Selecciona un entrenador antes de guardar.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            File archivo = new File("Entrenador_" + entrenadorActual.getNomEntrenador() + ".csv");

            try (BufferedWriter escritor = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(archivo), StandardCharsets.UTF_8))) {
                escritor.write("Nombre,Numero Pokédex,Nombre Pokémon,Alias,Tipo 1,Tipo 2,Nivel,Habilidad\n");

                List<Pokemon> listaPokemon = entrenadorController.obtenerPokemonPorEntrenadorId(entrenadorActual.getIdEntrenador());

                //recorremos la lista del entrenador, y mostramos las siguientes especificaciones
                //si no tiene alias, si no tiene segundo tipo o si no tiene habilidad
                for (Pokemon p : listaPokemon) {
                    String alias = (p.getAlias() != null) ? p.getAlias() : "Sin alias";
                    String tipo2 = (p.getSegundoTipo() != null) ? p.getSegundoTipo().toString() : "N/A";
                    String habilidad = (p.getHabilidad() != null) ? p.getHabilidad().getNombreHabilidad() : "N/A";

                    // Recuperar los ataques del Pokémon
                    List<PokemonAtaque> ataques = p.getPokemonAtaques();
                    String listaAtaques = ataques.isEmpty() ? "Sin ataques" : ataques.stream()
                            .map(pa -> pa.getAtaque().getNombreAtaque())
                            .collect(Collectors.joining("; "));

                    //Guardar la información en el CSV
                    escritor.write(entrenadorActual.getNomEntrenador() + "," + p.getNumeroPokedex() + "," + p.getNombrePokemon() + "," + alias + ","
                            + p.getTipoPokemon() + "," + tipo2 + "," + p.getNivel() + "," + habilidad + "," + listaAtaques + "\n");
                }

                JOptionPane.showMessageDialog(this, "Entrenador guardado correctamente en CSV.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Archivo guardado en: " + archivo.getAbsolutePath());

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el entrenador: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_GuardarEntrenadorActionPerformed

    private void CargarEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarEntrenadorActionPerformed
        JFileChooser fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        fileChooser.setDialogTitle("Seleccionar archivo CSV");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo CSV", "csv"));

        int seleccionArchivoUsuario = fileChooser.showOpenDialog(this);

        if (seleccionArchivoUsuario == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();

            try (BufferedReader br = new BufferedReader(
                    new InputStreamReader(new FileInputStream(archivo), StandardCharsets.UTF_8))) {
                String linea;
                br.readLine(); //Saltar encabezados

                // Instanciar los controladores
                PokemonController pokemonController = new PokemonController();
                AtaquesController ataquesController = new AtaquesController();

                // Mapas para almacenar los entrenadores y sus Pokémon leidos del CSV
                Map<String, Entrenador> entrenadoresMap = new HashMap<>();
                Map<String, List<Pokemon>> pokemonesPorEntrenador = new HashMap<>();

                while ((linea = br.readLine()) != null) {
                    String[] datos = linea.split(",");

                    if (datos.length < 9) {
                        JOptionPane.showMessageDialog(this, "Error en el CSV: Formato incorrecto. Revisar archivo.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }

                    // Datos del entrenador
                    String nombreEntrenador = datos[0];

                    // Recuperar o crear el entrenador
                    Entrenador entrenadorExistente = entrenadorController.buscarEntrenadorPorNombre(nombreEntrenador);
                    Entrenador entrenador;
                    if (entrenadorExistente != null) {
                        entrenador = entrenadorExistente;
                    } else {
                        entrenador = new Entrenador();
                        entrenador.setNomEntrenador(nombreEntrenador);
                        // 
                        entrenadorController.crearEntrenadorConPokemon(entrenador, new ArrayList<>());
                    }

                    entrenadoresMap.put(nombreEntrenador, entrenador);
                    pokemonesPorEntrenador.putIfAbsent(nombreEntrenador, new ArrayList<>());

                    try {
                        if (!datos[1].matches("\\d+") || !datos[6].matches("\\d+")) {
                            JOptionPane.showMessageDialog(this, "Error en el CSV: Número Pokédex o nivel no son números válidos.",
                                    "Error", JOptionPane.ERROR_MESSAGE);
                            continue;
                        }

                        // Datos del Pokémon
                        int numeroPokedex = Integer.parseInt(datos[1]);
                        int nivel = Integer.parseInt(datos[6]);

                        Pokemon nuevoPokemon = new Pokemon();
                        nuevoPokemon.setNumeroPokedex(numeroPokedex);
                        nuevoPokemon.setNombrePokemon(datos[2]);
                        nuevoPokemon.setAlias(!datos[3].equals("Sin alias") ? datos[3] : null);
                        nuevoPokemon.setTipoPokemon(TiposPokemon.valueOf(datos[4]));
                        nuevoPokemon.setSegundoTipo(!datos[5].equals("N/A") ? TiposPokemon.valueOf(datos[5]) : null);
                        nuevoPokemon.setNivel(nivel);
                        nuevoPokemon.setEntrenador(entrenador);

                        // Recuperar la habilidad (suponiendo que obtenerTodasHabilidades() funciona correctamente)
                        Habilidad habilidad = pokemonController.obtenerTodasHabilidades()
                                .stream()
                                .filter(h -> h.getNombreHabilidad().equals(datos[7]))
                                .findFirst()
                                .orElse(null);
                        nuevoPokemon.setHabilidad(habilidad);

                        // Restaurar los ataques guardados en el CSV
                        List<PokemonAtaque> ataquesAsignados = new ArrayList<>();
                        if (!datos[8].equals("Sin ataques")) {
                            String[] nombresAtaques = datos[8].split(";");
                            for (String nombreAtaque : nombresAtaques) {
                                Ataque ataque = ataquesController.obtenerAtaquePorNombre(nombreAtaque);
                                if (ataque == null) {
                                    // Si no existe, se crea automáticamente con valores predeterminados
                                    ataque = new Ataque();
                                    ataque.setNombreAtaque(nombreAtaque);
                                    ataque.setTipo("Normal");
                                    ataque.setCategoria("Especial");
                                    ataque.setEfecto("Sin efecto");
                                    ataque.setPotencia(0);
                                    ataque.setPp(10);
                                    ataquesController.guardarNuevoAtaque(ataque);
                                }
                                ataquesAsignados.add(new PokemonAtaque(nuevoPokemon, ataque, "CSV Restore"));
                            }
                        }
                        nuevoPokemon.setPokemonAtaques(ataquesAsignados);

                        pokemonesPorEntrenador.get(nombreEntrenador).add(nuevoPokemon);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Error en el CSV: Datos incorrectos en Número Pokédex o nivel.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                }

                // Persistir entrenadores y sus Pokémon (para cada entrenador se crea o actualiza)
                for (String nombre : entrenadoresMap.keySet()) {
                    Entrenador entrenador = entrenadoresMap.get(nombre);
                    List<Pokemon> pokemones = pokemonesPorEntrenador.get(nombre);
                    // Persistir el entrenador junto con sus Pokémon
                    entrenadorController.crearEntrenadorConPokemon(entrenador, pokemones);
                    // Aquí se asume que listaEntrenadores es una colección local en tu clase UI
                    listaEntrenadores.add(entrenador);
                }

                JOptionPane.showMessageDialog(this, "Entrenador restaurado correctamente",
                        "Exito", JOptionPane.INFORMATION_MESSAGE);

                // Actualizar la lista de entrenadores de la interfaz 
                modeloEntrenadores.removeAllElements();
                for (Entrenador e : entrenadorController.obtenerTodosLosEntrenadores()) {
                    modeloEntrenadores.addElement(e);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al cargar los entrenadores: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_CargarEntrenadorActionPerformed
    public void guardarEntrenadorEnCSV(Entrenador entrenador, List<Pokemon> listaPokemon) {
        try (BufferedWriter escritor = new BufferedWriter(new FileWriter("entrenadores.csv", true))) {
            escritor.write("Nombre,Numero Pokédex,Nombre Pokémon,Alias,Tipo 1,Tipo 2,Nivel,Habilidad,Ataques\n");

            for (Pokemon p : listaPokemon) {
                String alias = (p.getAlias() != null) ? p.getAlias() : "Sin alias";
                String tipo2 = (p.getSegundoTipo() != null) ? p.getSegundoTipo().toString() : "N/A";
                String habilidad = (p.getHabilidad() != null) ? p.getHabilidad().getNombreHabilidad() : "N/A";

                //Guardar ataques en CSV separados por ";"
                String listaAtaques = p.getPokemonAtaques().stream()
                        .map(pa -> pa.getAtaque().getNombreAtaque())
                        .collect(Collectors.joining(";"));

                escritor.write(entrenador.getNomEntrenador() + "," + p.getNumeroPokedex() + "," + p.getNombrePokemon() + "," + alias + ","
                        + p.getTipoPokemon() + "," + tipo2 + "," + p.getNivel() + "," + habilidad + "," + listaAtaques + "\n");
            }
        } catch (IOException e) {
            System.err.println("Error al guardar el entrenador en CSV: " + e.getMessage());
        }
    }

    private void imagenFondoEntrenador() {
        JPanelimagen imagenFondo = new JPanelimagen(MenuEntre, "/Fotos/InterfazEntrenadores.png");
        MenuEntre.add(imagenFondo).repaint();

        //estos 3, es para que se quite cualquier fondo o borde del label que use
        //la ventaja del label, es que funciona como fondo, puedo poner botones encima
        MenuEntre.setOpaque(false);
        MenuEntre.setBorder(null);
        MenuEntre.setBackground(new Color(0, 0, 0));

    }

    private void cargarEntrenadores() {
        try {
            listaEntrenadores = entrenadorController.obtenerTodosLosEntrenadores();

            modeloEntrenadores.clear();
            for (Entrenador e : listaEntrenadores) {
                modeloEntrenadores.addElement(e);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar los entrenadores: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MenuEntrenadores menuEntre = new MenuEntrenadores(); // se transformaen una variable
                //para poder ocultarlo desde otras clases
                menuEntre.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccederPokedex;
    private javax.swing.JButton AñadirEntrenador;
    private javax.swing.JButton BotonELiminar;
    private javax.swing.JButton BotonEditar;
    private javax.swing.JButton CargarEntrenador;
    private javax.swing.JButton GuardarEntrenador;
    private javax.swing.JList ListaEntrenadores;
    private javax.swing.JPanel MenuEntre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

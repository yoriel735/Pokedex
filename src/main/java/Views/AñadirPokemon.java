/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Views;

import Controladores.PokemonController;
import Entidades.Entrenador;
import Entidades.Habilidad;
import Entidades.Pokemon;
import Entidades.TiposPokemon;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author yoriel
 */
public class A침adirPokemon extends javax.swing.JDialog {

    private JTextField nombreField, aliasField, nivelField, numeroPokedexField;
    private JComboBox<TiposPokemon> tipo1Box, tipo2Box;
    private JComboBox<Habilidad> habilidadBox;
    private boolean confirmado = false;
    private Pokemon nuevoPokemon;
    private final PokemonController pokemonController;
    private final Entrenador entrenadorActual;  // 游댠 Guardamos el entrenador activo

    public A침adirPokemon(Frame parent, Entrenador entrenador) {
        super(parent, "A침adir Pok칠mon", true);
        this.pokemonController = new PokemonController();
        this.entrenadorActual = entrenador;
        initComponents();
        configurarFormulario(); //Agregar los componentes 
        setSize(400, 300);
        setLocationRelativeTo(parent);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void guardarPokemon() {
        try {
            if (nombreField.getText().isEmpty() || nivelField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Los campos obligatorios no pueden estar vacios.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int nivel;
            try {
                nivel = Integer.parseInt(nivelField.getText());
                if (nivel <= 0 || nivel > 100) {  // 游댠 Comprobamos el limite de nivel 
                    JOptionPane.showMessageDialog(this, "El nivel debe estar entre 1 y 100.", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "El nivel debe estar entre 1 y 100.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int numeroPokedex = pokemonController.generarNumeroPokedexUnico();  //Llamamos al metodo de
                //generar un numero de pokedex unico

            //Crear "el objeto" de pokemon antes de asignar valores
            nuevoPokemon = new Pokemon();
            nuevoPokemon.setNombrePokemon(nombreField.getText());
            nuevoPokemon.setAlias(aliasField.getText().isEmpty() ? null : aliasField.getText());
            nuevoPokemon.setNivel(nivel);
            nuevoPokemon.setNumeroPokedex(numeroPokedex);
            nuevoPokemon.setTipoPokemon((TiposPokemon) tipo1Box.getSelectedItem());
            nuevoPokemon.setSegundoTipo(tipo2Box.getSelectedItem() != null ? (TiposPokemon) tipo2Box.getSelectedItem() : null);
            nuevoPokemon.setEntrenador(entrenadorActual);
            nuevoPokemon.setHabilidad((Habilidad) habilidadBox.getSelectedItem());

            pokemonController.guardarPokemon(nuevoPokemon);
            confirmado = true;
            JOptionPane.showMessageDialog(this, "El pokemon se a침adio correctamente. Num_Pokedex: #" + numeroPokedex, "Exito", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al guardar el Pokemon: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void configurarFormulario() {
        JPanel panelCampos = new JPanel(new GridLayout(0, 2, 4, 4));

        nombreField = new JTextField(20);
        aliasField = new JTextField(20);
        nivelField = new JTextField(5);

        tipo1Box = new JComboBox<>(TiposPokemon.values());
        tipo2Box = new JComboBox<>(TiposPokemon.values());
        tipo2Box.insertItemAt(null, 0);

        //Agregar una validacion para evitar los tipos duplicados
        tipo1Box.addActionListener(e -> {
            TiposPokemon tipoSeleccionado = (TiposPokemon) tipo1Box.getSelectedItem();
            tipo2Box.removeItem(tipoSeleccionado); // 游댠 Eliminamos el tipo primario de opciones secundarias

            //Aqui hacemos que si el usuario eligio primero el tipo fuego, este 
            //no pueda aparecer de tipo secundario
            if (tipoSeleccionado == tipo2Box.getSelectedItem()) {
                tipo2Box.setSelectedItem(null);
            }
        });
        habilidadBox = new JComboBox<>(new PokemonController().obtenerTodasHabilidades().toArray(new Habilidad[0]));

        panelCampos.add(new JLabel("Nombre:"));
        panelCampos.add(nombreField);
        panelCampos.add(new JLabel("Alias (Opcional):"));
        panelCampos.add(aliasField);
        panelCampos.add(new JLabel("Nivel:"));
        panelCampos.add(nivelField);
        panelCampos.add(new JLabel("Tipo 1:"));
        panelCampos.add(tipo1Box);
        panelCampos.add(new JLabel("Tipo 2 (Opcional):"));
        panelCampos.add(tipo2Box);
        panelCampos.add(new JLabel("Habilidad:"));
        panelCampos.add(habilidadBox);

        //Creando botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        JButton btnGuardar = new JButton("Guardar");
        JButton btnCancelar = new JButton("Cancelar");

        btnGuardar.addActionListener(e -> guardarPokemon());
        btnCancelar.addActionListener(e -> dispose());

        panelBotones.add(btnGuardar);
        panelBotones.add(btnCancelar);

        //Agregar componentes a la ventana correctamente
        getContentPane().setLayout(new BorderLayout(10, 10));
        getContentPane().add(panelCampos, BorderLayout.CENTER);
        getContentPane().add(panelBotones, BorderLayout.SOUTH);

        pack(); //Ajustar autom치ticamente el tama침o seg칰n los componentes
    }

    public boolean isConfirmado() {
        return confirmado;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

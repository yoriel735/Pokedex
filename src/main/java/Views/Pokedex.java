package Views;

import Controladores.EntrenadorController;
import ControladoresExtras.JPanelimagen;
import Controladores.PokemonController;
import Entidades.Entrenador;
import Entidades.Habilidad;
import Entidades.Pokemon;
import Entidades.PokemonAtaque;
import Entidades.TiposPokemon;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author yoriel
 */
public class Pokedex extends javax.swing.JDialog {

    private Integer idEntrenador;
    private Pokemon pokemonSeleccionado;
    private MenuEntrenadores menuEntrenadores;
    private CapturarPokemon zonaCapturaActual;
    private List<Pokemon> listaPokemon = new ArrayList<>();
 

    /**
     * Creates new form poki
     *
     *
     * @param menuEntrenadores
     * @param modal
     *
     */
    public Pokedex(MenuEntrenadores menuEntrenadores, boolean modal, String entrenador) {
        super(menuEntrenadores, modal); // Pasamos la ventana de entrenadores como padre
        EntrenadorController ec = new EntrenadorController();
        this.idEntrenador = ec.obtenerIdPorNombre(entrenador);
        this.menuEntrenadores = menuEntrenadores;
//         this.idEntrenador = entrenador.getIdEntrenador();
        initComponents();              // Inicializa los componentes del diseño
        imagenBasePokedex();           // Añade imagen de fondo
        setTitle("Pokedex de " + entrenador); // Título de la ventana
        setLocationRelativeTo(null);
        this.setResizable(false);

        // Llamamos a ActualizarListaPokemon para cargar la lista desde la BD
        ActualizarListaPokemon(idEntrenador);

        MostrarNombreEntrenador.setText("Pokedex de: " + entrenador);
        MostrarIdEntrenador.setText("ID : " + idEntrenador);
        configurarIconoBotonEditar();

        //ListaPokemonEntrenador.setOpaque(false);             // Quita el fondo opaco
        ListaPokemonEntrenador.setBackground(new Color(224, 159, 159, 255)); // fonde del color de la imagen
        ListaPokemonEntrenador.setBorder(BorderFactory.createLineBorder(Color.red));

        // Agregar un WindowListener para volver a mostrar el menú de entrenadores al cerrar la Pokédex
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                if (menuEntrenadores != null) {
                    menuEntrenadores.setVisible(true); // Volver a mostrar el menú de entrenadores al cerrar Pokédex
                }
            }
        });

    }

    private void imagenBasePokedex() {
        JPanelimagen imagenFondo = new JPanelimagen(InterfazPokedex, "/Fotos/PokedexAModificar.png");
        InterfazPokedex.add(imagenFondo).repaint();
        InterfazPokedex.setOpaque(false);
        InterfazPokedex.setBorder(null);
        InterfazPokedex.setBackground(new Color(0, 0, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        Habilidad1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        InterfazPokedex = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaPokemonEntrenador = new javax.swing.JList<>();
        MostrarNombreEntrenador = new javax.swing.JLabel();
        MostrarIdEntrenador = new javax.swing.JLabel();
        NivelPokemon = new javax.swing.JLabel();
        Tipo1Pokemon = new javax.swing.JLabel();
        Tipo2Pokemon = new javax.swing.JLabel();
        AliasPokemon = new javax.swing.JLabel();
        HabilidadPokemon = new javax.swing.JLabel();
        Habilidad = new javax.swing.JButton();
        BotonAtaques = new javax.swing.JToggleButton();
        ImagenPokemon = new javax.swing.JLabel();
        PokemonShiny = new javax.swing.JLabel();
        BotonEditarAlias = new javax.swing.JButton();
        ZonaCaptura = new javax.swing.JButton();
        LiberarPokemon = new javax.swing.JButton();
        AñadirPokemonManualmente = new javax.swing.JButton();
        BotonRetroceder = new javax.swing.JButton();

        jButton1.setText("jButton1");

        Habilidad1.setText("Habilidad:");
        Habilidad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Habilidad1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("jCheckBox1");

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ListaPokemonEntrenador.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaPokemonEntrenador);

        MostrarNombreEntrenador.setFont(new java.awt.Font("Nimbus Mono PS", 1, 24)); // NOI18N
        MostrarNombreEntrenador.setText("Nombre Entrenador");

        MostrarIdEntrenador.setText("IDEntre");

        NivelPokemon.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        NivelPokemon.setText("Nivel");

        Tipo1Pokemon.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        Tipo1Pokemon.setText("Tipo1");

        Tipo2Pokemon.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        Tipo2Pokemon.setText("Tipo2");

        AliasPokemon.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        AliasPokemon.setText("Alias");

        Habilidad.setText("Habilidad:");
        Habilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HabilidadActionPerformed(evt);
            }
        });

        BotonAtaques.setText("Ataques");
        BotonAtaques.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAtaquesActionPerformed(evt);
            }
        });

        ImagenPokemon.setBackground(new java.awt.Color(102, 102, 255));

        BotonEditarAlias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarAliasActionPerformed(evt);
            }
        });

        ZonaCaptura.setText("Hierba Alta");
        ZonaCaptura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZonaCapturaActionPerformed(evt);
            }
        });

        LiberarPokemon.setText("Liberar");
        LiberarPokemon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LiberarPokemonActionPerformed(evt);
            }
        });

        AñadirPokemonManualmente.setText("Añadir Pokemon");
        AñadirPokemonManualmente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirPokemonManualmenteActionPerformed(evt);
            }
        });

        BotonRetroceder.setText("Volver Al menu");
        BotonRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRetrocederActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InterfazPokedexLayout = new javax.swing.GroupLayout(InterfazPokedex);
        InterfazPokedex.setLayout(InterfazPokedexLayout);
        InterfazPokedexLayout.setHorizontalGroup(
            InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfazPokedexLayout.createSequentialGroup()
                .addGap(479, 479, 479)
                .addComponent(ImagenPokemon, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addGap(53, 53, 53)
                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfazPokedexLayout.createSequentialGroup()
                            .addComponent(HabilidadPokemon)
                            .addGap(168, 168, 168))
                        .addGroup(InterfazPokedexLayout.createSequentialGroup()
                            .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Habilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                    .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Tipo2Pokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Tipo1Pokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(15, 15, 15))
                                .addComponent(BotonAtaques, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(111, 111, 111)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfazPokedexLayout.createSequentialGroup()
                        .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addComponent(NivelPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PokemonShiny, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AliasPokemon))
                                .addGap(23, 23, 23)))
                        .addComponent(BotonEditarAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InterfazPokedexLayout.createSequentialGroup()
                        .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AñadirPokemonManualmente)
                            .addComponent(ZonaCaptura))
                        .addGap(40, 40, 40))))
            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MostrarIdEntrenador)
                    .addComponent(MostrarNombreEntrenador, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LiberarPokemon)
                .addGap(18, 18, 18)
                .addComponent(BotonRetroceder)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        InterfazPokedexLayout.setVerticalGroup(
            InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InterfazPokedexLayout.createSequentialGroup()
                        .addComponent(PokemonShiny, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                        .addComponent(ZonaCaptura)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(AñadirPokemonManualmente)
                                        .addGap(137, 137, 137)
                                        .addComponent(BotonEditarAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ImagenPokemon, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(164, Short.MAX_VALUE))
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AliasPokemon)
                                .addGap(18, 18, 18)
                                .addComponent(NivelPokemon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tipo1Pokemon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tipo2Pokemon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Habilidad)
                                .addGap(8, 8, 8)
                                .addComponent(BotonAtaques)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HabilidadPokemon)
                                .addGap(16, 16, 16))))
                    .addGroup(InterfazPokedexLayout.createSequentialGroup()
                        .addComponent(MostrarNombreEntrenador)
                        .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(MostrarIdEntrenador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(InterfazPokedexLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(InterfazPokedexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LiberarPokemon)
                                    .addComponent(BotonRetroceder))
                                .addContainerGap())))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(InterfazPokedex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(InterfazPokedex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HabilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HabilidadActionPerformed
        Habilidad habilidadSeleccionada = (Habilidad) Habilidad.getClientProperty("habilidad");
        if (habilidadSeleccionada != null) {
            JOptionPane.showMessageDialog(this,
                    habilidadSeleccionada.getDescripcionHabilidad(),
                    habilidadSeleccionada.getNombreHabilidad(),
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Este Pokémon no tiene habilidad asignada.",
                    "Sin habilidad",
                    JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_HabilidadActionPerformed

    private void Habilidad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Habilidad1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Habilidad1ActionPerformed

    private void BotonAtaquesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAtaquesActionPerformed

        PokemonController pc = new PokemonController();

        if (pokemonSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un Pokémon primero.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Esto es para evitar que netbeans se me congelara, me estaba dando muchos fallos
        SwingWorker<List<PokemonAtaque>, Void> worker = new SwingWorker<>() {
            @Override
            protected List<PokemonAtaque> doInBackground() throws Exception {
                // Obtenemos los ataques
                return pc.obtenerAtaquesPorPokemon(pokemonSeleccionado.getIdPokemon());
            }

            @Override
            protected void done() {
                try {
                    List<PokemonAtaque> ataques = get();

                    System.out.println("Ataques obtenidos: " + (ataques == null ? "null" : ataques.size()));
                    if (ataques != null) {
                        for (PokemonAtaque pa : ataques) {
                            System.out.println("  → " + (pa.getAtaque() != null ? pa.getAtaque().getNombreAtaque() : "NULL ATAQUE"));
                        }
                    }

                    // Mostrar dialog, con el padre para evitar problemas de foco/modalidad
                    MostrarAtaques dialog = new MostrarAtaques(Pokedex.this, java.awt.Dialog.ModalityType.APPLICATION_MODAL, pokemonSeleccionado);

                    dialog.cargarAtaques(ataques);
                    dialog.setVisible(true);

                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(Pokedex.this, "Error al cargar ataques: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        worker.execute();

    }//GEN-LAST:event_BotonAtaquesActionPerformed

    private void BotonEditarAliasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarAliasActionPerformed

        if (pokemonSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "No hay Pokémon seleccionado.");
            return;
        }

        JTextField aliasField = new JTextField(pokemonSeleccionado.getAlias());
        int resultado = JOptionPane.showConfirmDialog(this, aliasField, "Editar Alias", JOptionPane.OK_CANCEL_OPTION);

        if (resultado == JOptionPane.OK_OPTION) {
            String nuevoAlias = aliasField.getText().trim();
            if (!nuevoAlias.isEmpty()) {
                pokemonSeleccionado.setAlias(nuevoAlias);
                AliasPokemon.setText("Alias: " + nuevoAlias);

                // Guardar en base de datos
                PokemonController pc = new PokemonController();
                pc.actualizarAliasPokemon(pokemonSeleccionado.getIdPokemon(), nuevoAlias);

                JOptionPane.showMessageDialog(this, "Alias actualizado con éxito.");
            }
        }


    }//GEN-LAST:event_BotonEditarAliasActionPerformed

    private void ZonaCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZonaCapturaActionPerformed

        // Si hay una instancia previa de CapturarPokemon, se cierra.
        if (zonaCapturaActual != null) {
            System.out.println("Cerrando instancia anterior de CapturarPokemon...");
            zonaCapturaActual.dispose();
            zonaCapturaActual = null;
        }

        // Se oculta la Pokédex.
        this.setVisible(false);

        if (menuEntrenadores != null) {
            menuEntrenadores.dispose();
        }

        // Obtener el nombre del entrenador actual.
        String nombreEntrenador = MostrarNombreEntrenador.getText().replace("Pokedex de: ", "").trim();

        // Crear y mostrar la instancia de CapturarPokemon.
        zonaCapturaActual = new CapturarPokemon(menuEntrenadores, nombreEntrenador);
        zonaCapturaActual.setLocationRelativeTo(this);

        // Registrar un listener para que cuando se cierre CapturarPokemon se actualice y se vuelva a mostrar la misma Pokédex.
        zonaCapturaActual.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                System.out.println("🔥CapturarPokemon cerrado, volviendo a la Pokédex...");
                // Actualizamos la lista de Pokémon de la instancia original.
                Pokedex.this.ActualizarListaPokemon(new EntrenadorController().obtenerIdPorNombre(nombreEntrenador));
                Pokedex.this.setVisible(true);
                zonaCapturaActual = null;
            }
        });

        zonaCapturaActual.setVisible(true);


    }//GEN-LAST:event_ZonaCapturaActionPerformed

    private void LiberarPokemonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LiberarPokemonActionPerformed
        int index = ListaPokemonEntrenador.getSelectedIndex();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un Pokémon para liberar.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Aquí usamos el campo 'listaPokemon' que ya se actualizó
        Pokemon pokemonAEliminar = listaPokemon.get(index);

        int confirmacion = JOptionPane.showConfirmDialog(
                this, "¿Seguro que quieres liberar a " + pokemonAEliminar.getNombrePokemon() + "?",
                "Confirmar Liberación", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            PokemonController pokemonController = new PokemonController();
            boolean eliminado = pokemonController.eliminarPokemon(pokemonAEliminar.getIdPokemon());

            if (eliminado) {
                JOptionPane.showMessageDialog(this,
                        "Ha sido un placer, " + pokemonAEliminar.getNombrePokemon() + "!",
                        "Pokémon Liberado", JOptionPane.INFORMATION_MESSAGE);

                //Actualizamos la lista tras la eliminación
                ActualizarListaPokemon(idEntrenador);
            } else {
                JOptionPane.showMessageDialog(this,
                        "No se pudo liberar a " + pokemonAEliminar.getNombrePokemon() + ".",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_LiberarPokemonActionPerformed

    private void AñadirPokemonManualmenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirPokemonManualmenteActionPerformed
        EntrenadorController ec = new EntrenadorController();
        Entrenador entrenadorActual = ec.buscarEntrenadorPorId(idEntrenador);  //Obtenerlo desde la BD

        AñadirPokemon dialog = new AñadirPokemon(menuEntrenadores, entrenadorActual);  //Pasamos `menuEntrenadores`, que es un Frame
        dialog.setVisible(true);

        if (dialog.isConfirmado()) {
            ActualizarListaPokemon(idEntrenador);  //Refrescar la lista
        }

    }//GEN-LAST:event_AñadirPokemonManualmenteActionPerformed

    private void BotonRetrocederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRetrocederActionPerformed
        this.setVisible(false);
        new MenuEntrenadores().setVisible(true);
    }//GEN-LAST:event_BotonRetrocederActionPerformed
    private void configurarIconoBotonEditar() {
        try {
            ImageIcon iconoLapiz = new ImageIcon(getClass().getResource("/Fotos/lapiz.png"));
            Image imagenEscalada = iconoLapiz.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            ImageIcon iconoEscalado = new ImageIcon(imagenEscalada);
            BotonEditarAlias.setIcon(iconoEscalado);
            BotonEditarAlias.setBorder(null);
            BotonEditarAlias.setContentAreaFilled(false);
            BotonEditarAlias.setFocusPainted(false);
            BotonEditarAlias.setCursor(new Cursor(Cursor.HAND_CURSOR));
        } catch (Exception e) {
            System.out.println("No se pudo cargar el icono: " + e.getMessage());
        }
    }

    public void ActualizarListaPokemon(Integer idEntrenador) {
        PokemonController pokimon = new PokemonController();

        // Guardamos la lista en el atributo de la clase
        this.listaPokemon = pokimon.obtenerPokemonPorEntrenadorId(idEntrenador);

        DefaultListModel<String> modelo = new DefaultListModel<>();
        for (Pokemon p : this.listaPokemon) {
            modelo.addElement(p.getNombrePokemon());//lo que muestra el atributo en cuestion del pokemon, en este caso el nombre
        }
        ListaPokemonEntrenador.setModel(modelo);

        // Agregamos el listener si aún no existe alguno, para evitar duplicados
        if (ListaPokemonEntrenador.getListSelectionListeners().length == 0) {
            ListaPokemonEntrenador.addListSelectionListener(e -> {
                if (!e.getValueIsAdjusting()) {
                    int index = ListaPokemonEntrenador.getSelectedIndex();
                    if (index >= 0 && index < listaPokemon.size()) {
                        mostrarDetallesPokemon(listaPokemon.get(index));
                        mostrarImagenPokemon(listaPokemon.get(index));
                    }
                }
            });
        }
    }

    private void mostrarDetallesPokemon(Pokemon p) {
        NivelPokemon.setText("Nivel: " + p.getNivel());
//    Tipo1Pokemon.setText("Tipo 1: " + (p.getTipo1() != null ? p.getTipo1() : "N/A"));
//    Tipo2Pokemon.setText("Tipo 2: " + (p.getTipo2() != null ? p.getTipo2() : "N/A"));
        AliasPokemon.setText("Alias: " + (p.getAlias() != null ? p.getAlias() : "N/A"));

        Tipo1Pokemon.setText("Tipo 1: " + formatearTipo(p.getTipoPokemon()));
        Tipo2Pokemon.setText("Tipo 2: " + formatearTipo(p.getSegundoTipo()));

        // Mostrar nombres de habilidades separados por coma
        Habilidad habilidad = p.getHabilidad();
        if (habilidad != null) {
            HabilidadPokemon.setText("Habilidad: " + habilidad.getNombreHabilidad());
            Habilidad.setText(habilidad.getNombreHabilidad());  // Texto del botón
            Habilidad.putClientProperty("habilidad", habilidad); // Guardar referencia para el botón
        } else {
            HabilidadPokemon.setText("Habilidad: Ninguna");
            Habilidad.setText("Habilidad");
            Habilidad.putClientProperty("habilidad", null);
        }

        this.pokemonSeleccionado = p;
    }

    private String formatearTipo(TiposPokemon tipo) {
        if (tipo == null) {
            return " -- ";
        }
        String nombre = tipo.name().toLowerCase();
        return Character.toUpperCase(nombre.charAt(0)) + nombre.substring(1);
    }

    private void mostrarImagenPokemon(Pokemon p) {

        try {
            //URL basada en el nombre del Pokémon, no en su ID

            String urlImagen = "https://img.pokemondb.net/sprites/home/normal/" + p.getNombrePokemon().toLowerCase().trim() + ".png";
            String urlImagenShiny = "https://img.pokemondb.net/sprites/home/shiny/" + p.getNombrePokemon().toLowerCase().trim() + ".png";

            // Descargar la imagen desde la URL
            ImageIcon Pokemon = new ImageIcon(new URL(urlImagen));
            ImageIcon shiny = new ImageIcon(new URL(urlImagenShiny));
            // Ajustar el tamaño de la imagen (Opcional)
            Image image = Pokemon.getImage().getScaledInstance(250, 250, Image.SCALE_SMOOTH);
            ImagenPokemon.setIcon(new ImageIcon(image));

            Image imageShiny = shiny.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            PokemonShiny.setIcon(new ImageIcon(imageShiny));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo cargar la imagen de " + p.getNombrePokemon(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

//    public void actualizarListaPokemon() {
//    EntrenadorController entrenadorCtrl = new EntrenadorController();
//    List<Pokemon> listaCapturados = entrenadorCtrl.obtenerPokemonPorEntrenadorId(entrenadorActual.getIdEntrenador());
//
//    DefaultListModel<String> modeloLista = new DefaultListModel<>();
//    for (Pokemon p : listaCapturados) {
//        modeloLista.addElement(p.getNombrePokemon() + " - Nivel " + p.getNivel());
//    }
//
//    jListPokemonCapturados.setModel(modeloLista);
//}
    /**
     * @param args the command line arguments
     */
//    public static void main(String[] args) {
//        // Aseguramos que todo se ejecute en el hilo de eventos de Swing
//        SwingUtilities.invokeLater(() -> {
//            MenuEntrenadores menuEntrenadores = new MenuEntrenadores();
//            menuEntrenadores.setVisible(true);
//
//            Pokedex dialog = new Pokedex(menuEntrenadores, true, "Ash Ketchum");
//            dialog.setVisible(true);
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AliasPokemon;
    private javax.swing.JButton AñadirPokemonManualmente;
    private javax.swing.JToggleButton BotonAtaques;
    private javax.swing.JButton BotonEditarAlias;
    private javax.swing.JButton BotonRetroceder;
    private javax.swing.JButton Habilidad;
    private javax.swing.JButton Habilidad1;
    private javax.swing.JLabel HabilidadPokemon;
    private javax.swing.JLabel ImagenPokemon;
    private javax.swing.JPanel InterfazPokedex;
    private javax.swing.JButton LiberarPokemon;
    private javax.swing.JList<String> ListaPokemonEntrenador;
    private javax.swing.JLabel MostrarIdEntrenador;
    private javax.swing.JLabel MostrarNombreEntrenador;
    private javax.swing.JLabel NivelPokemon;
    private javax.swing.JLabel PokemonShiny;
    private javax.swing.JLabel Tipo1Pokemon;
    private javax.swing.JLabel Tipo2Pokemon;
    private javax.swing.JButton ZonaCaptura;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

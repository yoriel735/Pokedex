/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Views;

import Controladores.AtaquesController;
import ControladoresExtras.JPanelimagen;
import Entidades.Ataque;
import Entidades.Pokemon;
import Entidades.PokemonAtaque;
import java.awt.Color;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yoriel
 */
public class MostrarAtaques extends javax.swing.JDialog {

    private final Pokemon pokemon;
    private final AtaquesController ataquesController;

    public MostrarAtaques(java.awt.Window parent, java.awt.Dialog.ModalityType modalityType, Pokemon pokemon) {
        super(parent, modalityType);
        this.pokemon = pokemon;
        this.ataquesController = new AtaquesController(); // Inicializamos el controlador
        initComponents();
        setTitle("Ataques de " + pokemon.getNombrePokemon());
        setLocationRelativeTo(parent);
        setResizable(false);
        imagenFondoEntrenador();
        actualizarTabla(); // Carga los ataques al iniciar
    }

    /**
     * Carga los ataques en la tabla.
     *
     * @param ataques Lista de PokemonAtaque para mostrar
     */
    public void cargarAtaques(List<PokemonAtaque> ataques) {
        DefaultTableModel modelo = (DefaultTableModel) tablaAtaques.getModel();
        modelo.setRowCount(0); // Limpiar la tabla

        for (PokemonAtaque pa : ataques) {
            Ataque ataque = pa.getAtaque();

            Object[] fila = new Object[]{
                ataque.getIdAtaque(), //Agregar el ID del ataque aquí
                ataque.getNombreAtaque() != null ? ataque.getNombreAtaque() : "--",
                ataque.getTipo() != null ? ataque.getTipo() : "--",
                ataque.getCategoria() != null ? ataque.getCategoria() : "--",
                ataque.getEfecto() != null ? ataque.getEfecto() : "--",
                ataque.getPotencia() != null ? ataque.getPotencia() : "--",
                ataque.getPp() != null ? ataque.getPp() : "--"
            };

            modelo.addRow(fila);
        }

        tablaAtaques.repaint();
        tablaAtaques.revalidate();
    }

    private void imagenFondoEntrenador() {
        JPanelimagen imagenFondo = new JPanelimagen(fondoAtaque, "/Fotos/fondoAtaques.png");
        fondoAtaque.add(imagenFondo).repaint();

        //estos 3, es para que se quite cualquier fondo o borde del label que use
        //la ventaja del label, es que funciona como fondo, puedo poner botones encima
        fondoAtaque.setOpaque(false);
        fondoAtaque.setBorder(null);
        fondoAtaque.setBackground(new Color(0, 0, 0));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jColorChooser2 = new javax.swing.JColorChooser();
        fondoAtaque = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAtaques = new javax.swing.JTable();
        BotonAñadir = new javax.swing.JButton();
        BotonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fondoAtaque.setBackground(new java.awt.Color(51, 204, 255));

        jScrollPane1.setBackground(new java.awt.Color(153, 255, 153));

        tablaAtaques.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Tipo", "Categoria", "Efecto", "Potencia", "PP"
            }
        ));
        jScrollPane1.setViewportView(tablaAtaques);

        BotonAñadir.setText("Añadir");
        BotonAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAñadirActionPerformed(evt);
            }
        });

        BotonEliminar.setText("Eliminar");
        BotonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fondoAtaqueLayout = new javax.swing.GroupLayout(fondoAtaque);
        fondoAtaque.setLayout(fondoAtaqueLayout);
        fondoAtaqueLayout.setHorizontalGroup(
            fondoAtaqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoAtaqueLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoAtaqueLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonAñadir)
                .addGap(18, 18, 18)
                .addComponent(BotonEliminar)
                .addGap(17, 17, 17))
        );
        fondoAtaqueLayout.setVerticalGroup(
            fondoAtaqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoAtaqueLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fondoAtaqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonAñadir)
                    .addComponent(BotonEliminar))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondoAtaque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(fondoAtaque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAñadirActionPerformed
        java.awt.Frame parentFrame = JOptionPane.getFrameForComponent(this);
        AñadirAtaque dialogoAñadir = new AñadirAtaque(parentFrame);
        dialogoAñadir.setVisible(true);

        if (dialogoAñadir.isConfirmado()) {
            Ataque nuevoAtaque = dialogoAñadir.getAtaque();
            ataquesController.guardarAtaqueYPokemon(pokemon, nuevoAtaque); //Usamos el controlador
            actualizarTabla();
        }


    }//GEN-LAST:event_BotonAñadirActionPerformed

    private void BotonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarActionPerformed
       int filaSeleccionada = tablaAtaques.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un ataque para eliminar.", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int idAtaque = obtenerIdAtaqueDesdeFila(filaSeleccionada);
    if (idAtaque != -1) { // Verificar que se obtuvo un ID válido
        ataquesController.eliminarAtaque(pokemon.getIdPokemon(), idAtaque);
        actualizarTabla();
    }
}
    
    //esto me transforma el string de la tabla, a integer, para que se pueda borrar
    //por el id
    private int obtenerIdAtaqueDesdeFila(int fila) {
        Object idValue = tablaAtaques.getValueAt(fila, 0); //Primera columna debe ser ID

        if (idValue instanceof Integer) {
            return (Integer) idValue;
        } else if (idValue instanceof String) {
            try {
                return Integer.parseInt((String) idValue);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error al obtener el ID del ataque. Verifica la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
                return -1;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Formato de ID inesperado.", "Error", JOptionPane.ERROR_MESSAGE);
            return -1;
        }


    }//GEN-LAST:event_BotonEliminarActionPerformed
    public void actualizarTabla() {
        DefaultTableModel modelo = new DefaultTableModel(new Object[]{"ID", "Nombre", "Tipo", "Categoría", "Efecto", "Potencia", "PP"}, 0);
    tablaAtaques.setModel(modelo); //Asegurar que el modelo tenga todas las columnas

    List<PokemonAtaque> ataques = ataquesController.obtenerAtaquesPorPokemon(pokemon.getIdPokemon());
    for (PokemonAtaque pa : ataques) {
        Ataque ataque = pa.getAtaque();

        Object[] fila = new Object[]{
            ataque.getIdAtaque(), //ID oculto
            ataque.getNombreAtaque(),
            ataque.getTipo(),
            ataque.getCategoria(),
            ataque.getEfecto(),
            ataque.getPotencia(),
            ataque.getPp()
        };

        modelo.addRow(fila);
    }
    if (ataques == null || ataques.isEmpty()) {
    JLabel mensaje = new JLabel("Este Pokemon aun no tiene ataques asignados.");
    JPanel panel = new JPanel();
    panel.add(mensaje);
    
    
    JOptionPane.showMessageDialog(this, panel, "Ataques del Pokémon", JOptionPane.INFORMATION_MESSAGE);
}

    // Ocultar la columna del ID (columna 0)
    tablaAtaques.getColumnModel().getColumn(0).setMinWidth(0);
    tablaAtaques.getColumnModel().getColumn(0).setMaxWidth(0);
    tablaAtaques.getColumnModel().getColumn(0).setWidth(0);

    tablaAtaques.repaint();
    tablaAtaques.revalidate();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAñadir;
    private javax.swing.JButton BotonEliminar;
    private javax.swing.JPanel fondoAtaque;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JColorChooser jColorChooser2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAtaques;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import Controladores.EntrenadorController;
import Controladores.JPanelimagen;
import Entidades.Entrenador;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/**
 *
 * @author yoriel
 */
public class MenuEntrenadores extends javax.swing.JFrame {

    /**
     * Creates new form PantallaInicio
     */
    DefaultListModel<Entrenador> modeloEntrenadores = new DefaultListModel<>();
    private EntrenadorController entrenadorController = new EntrenadorController();
    private List<Entrenador> listaEntrenadores = new ArrayList<>();

    public MenuEntrenadores() {
        initComponents();
        setTitle("Selector de Entrenadores");
        ListaEntrenadores.setModel(modeloEntrenadores);

        imagenFondoEntrenador();
        setLocationRelativeTo(null);
        this.setResizable(false);

        cargarEntrenadores();

        //Para que la lista sea transparente o bueno, tengo el color del fondo
       // ListaEntrenadores.setOpaque(false);             // Quita el fondo opaco
        ListaEntrenadores.setBackground(new Color(13, 173, 239, 255)); // Fondo completamente transparente
        ListaEntrenadores.setBorder(BorderFactory.createLineBorder(Color.red));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MenuEntre = new javax.swing.JPanel();
        AñadirEntrenador = new javax.swing.JButton();
        BotonELiminar = new javax.swing.JButton();
        AccederPokedex = new javax.swing.JButton();
        BotonEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaEntrenadores = new javax.swing.JList();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AñadirEntrenador.setText("Añadir Entrenador");
        AñadirEntrenador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirEntrenadorActionPerformed(evt);
            }
        });

        BotonELiminar.setText("Eliminar Entrenador");
        BotonELiminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonELiminarActionPerformed(evt);
            }
        });

        AccederPokedex.setText("Acceder Pokedex");
        AccederPokedex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccederPokedexActionPerformed(evt);
            }
        });

        BotonEditar.setText("Editar Entrenador");
        BotonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarActionPerformed(evt);
            }
        });

        ListaEntrenadores.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        ListaEntrenadores.setToolTipText("");
        jScrollPane1.setViewportView(ListaEntrenadores);

        javax.swing.GroupLayout MenuEntreLayout = new javax.swing.GroupLayout(MenuEntre);
        MenuEntre.setLayout(MenuEntreLayout);
        MenuEntreLayout.setHorizontalGroup(
            MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuEntreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonEditar)
                    .addComponent(AñadirEntrenador)
                    .addComponent(BotonELiminar)
                    .addComponent(AccederPokedex))
                .addGap(56, 56, 56))
        );
        MenuEntreLayout.setVerticalGroup(
            MenuEntreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuEntreLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(AñadirEntrenador)
                .addGap(18, 18, 18)
                .addComponent(BotonEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BotonELiminar)
                .addGap(178, 178, 178)
                .addComponent(AccederPokedex)
                .addContainerGap(134, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuEntreLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuEntre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuEntre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AñadirEntrenadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirEntrenadorActionPerformed
        //Obtener el entrenador seleccionado  
        //(----------------añadir entrenador)--------------)

        // Luego de cerrar el diálogo, recarga tus datos para actualizar la vista
        AñadirEntrenador dialog = new AñadirEntrenador(this, true); // 'this' es el JFrame padre
        dialog.setVisible(true);  // Aquí se abre el Jdialog de "AñadirEntrenador"
        cargarEntrenadores();   // Al cerrarse el diálogo, recarga la lista para actualizar
        //modeloEntrenadores = new DefaultListModel<>();
    }//GEN-LAST:event_AñadirEntrenadorActionPerformed

    private void BotonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarActionPerformed
        //(----------------------editar entrenador-------------)
// Obtener el entrenador seleccionado en la lista
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador para editar.");
            return;
        }
        Entrenador entrenadorSeleccionado = modeloEntrenadores.getElementAt(indiceSeleccionado);

        EditarEntrenador dialog = new EditarEntrenador(this, true, entrenadorSeleccionado);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        cargarEntrenadores();

    }//GEN-LAST:event_BotonEditarActionPerformed

    private void BotonELiminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonELiminarActionPerformed
        //---------------------(eliminar entrenador------------------)
        // Primero obtenemos el entrenador seleccionado en la lista
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador para eliminar.");
            return;
        }

        Entrenador entrenadorSeleccionado = modeloEntrenadores.getElementAt(indiceSeleccionado);

        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Estás seguro que quieres eliminar al entrenador " + entrenadorSeleccionado.getNomEntrenador() + "?",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                entrenadorController.eliminarEntrenador(entrenadorSeleccionado.getIdEntrenador());
                JOptionPane.showMessageDialog(this, "Entrenador eliminado correctamente.");
                cargarEntrenadores();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error al eliminar el entrenador: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_BotonELiminarActionPerformed

    private void AccederPokedexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccederPokedexActionPerformed
        //(-------------------boton de acceder a pokedex---------------------)
        int indiceSeleccionado = ListaEntrenadores.getSelectedIndex();
        if (indiceSeleccionado < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un entrenador.");
            return;
        }
        Entrenador entrenadorSeleccionado = listaEntrenadores.get(indiceSeleccionado);
        if (entrenadorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un entrenador para acceder a la Pokedex.");
            return;
        }

        // Crear la ventana de Pokedex, pasando el entrenador seleccionado
        Pokedex ventanaPokedex = new Pokedex(this, true, entrenadorSeleccionado.getNomEntrenador());
        ventanaPokedex.setLocationRelativeTo(this);
        ventanaPokedex.setVisible(true);
    }//GEN-LAST:event_AccederPokedexActionPerformed

    private void imagenFondoEntrenador() {
        JPanelimagen imagenFondo = new JPanelimagen(MenuEntre, "/Fotos/InterfazEntrenadores.png");
        MenuEntre.add(imagenFondo).repaint();

        //estos 3, es para que se quite cualquier fondo o borde del label que use
        //la ventaja del label, es que funciona como fondo, puedo poner botones encima
        MenuEntre.setOpaque(false);
        MenuEntre.setBorder(null);
        MenuEntre.setBackground(new Color(0, 0, 0));

    }

    private void cargarEntrenadores() {
        try {
            listaEntrenadores = entrenadorController.obtenerTodosLosEntrenadores();

            modeloEntrenadores.clear();
            for (Entrenador e : listaEntrenadores) {
                modeloEntrenadores.addElement(e);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar los entrenadores: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuEntrenadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuEntrenadores().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccederPokedex;
    private javax.swing.JButton AñadirEntrenador;
    private javax.swing.JButton BotonELiminar;
    private javax.swing.JButton BotonEditar;
    private javax.swing.JList ListaEntrenadores;
    private javax.swing.JPanel MenuEntre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
